pairs.panels(train.data[numeric.col])
return(list("summary"=sum.data, "missing.value"=miss.vis, "histogram"=histo,
"matrix.correlation"=matrix.cor, "scatter.plot"=scatter))
}
visualize.data <- vis(train.data, test.data, 17, 17)
visualize.data$scatter.plot
# Data visualization function:
vis <- function(train.data, test.data, tar.loc.train, tar.loc.test)
{
# summarize dataset
sum.train <- summary(train.data)
sum.test  <- summary(test.data)
sum.data  <- list("summary.train.data"=sum.train, "summary.test.data"=sum.test)
# create ggplot_missing function to map missing values:
library(reshape2)
library(dplyr)
library(ggplot2)
ggplot_missing <- function(x){
x %>% is.na %>% melt %>% ggplot(data = ., aes(x = Var2, y = Var1)) +
geom_raster(aes(fill = value)) +
scale_fill_grey (name = '', labels = c('Present', 'Missing')) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 0.5)) +
labs(x = 'Variables on Dataset', y = 'Rows / Observations') }
# map missing values for train data:
vis.train <- ggplot_missing(train.data)
num.miss.train <- sapply(train.data,function(x) sum(is.na(x)))
# map missing values for test data:
vis.test <- ggplot_missing(test.data)
num.miss.test <- sapply(test.data,function(x) sum(is.na(x)))
miss.vis <- list("vis.train"=vis.train, "vis.test"=vis.test,
"num.train"=num.miss.train, "num.test"=num.miss.test)
# histogram of Target variable
if (is.numeric(train.data[tar.loc.train])) { histo <- hist(train.data[tar.loc.train]) }
else {histo = NULL}
# exploring relationships among features: correlation matrix
tar.name.train     <- names(train.data[tar.loc.train])
class.train        <- lapply(train.data[-tar.loc.train], class)
{
if (any(class.train=="factor")) {
char.name.train  <- names(which(class.train=="factor"))
char.loc.train   <- match(char.name.train, names(train.data))
numeric.col      <- names(train.data[-c(char.loc.train, tar.loc.train)]) }
else {
numeric.col      <- names(train.data[-tar.loc.train]) }
}
matrix.cor <- cor(train.data[numeric.col])
# visualing relationships among features: scatterplot matrix
# library(tidyverse)
library(gridExtra)
col <- c("blue", "red")
p   <- pairs(train.data[numeric.col],col = col, cex.labels = 1.5,
lower.panel = NULL, pch=19, cex = 1)
scatter <- arrangeGrob(p, p)
# more informative scatterplot matrix
library(psych)
pairs.panels(train.data[numeric.col])
return(list("summary"=sum.data, "missing.value"=miss.vis, "histogram"=histo,
"matrix.correlation"=matrix.cor, "scatter.plot"=scatter))
}
visualize.data <- vis(train.data, test.data, 17, 17)
visualize.data$scatter.plot
grid::grid.draw(visualize.data$scatter.plot)
grid::grid.draw(visualize.data$scatter.plot$layout)
grid::grid.draw(visualize.data$scatter.plot$grobs[1])
grid::grid.draw(visualize.data$scatter.plot$grobs)
install.packages("pryr")
library(pryr)
col <- c("blue", "red")
p %<p-% pairs(train.data[numeric.col],col = col, cex.labels = 1.5,
lower.panel = NULL, pch=19, cex = 1)
scatter <- "p"
library(pryr)
col <- c("blue", "red")
p %<p-% {pairs(train.data[numeric.col],col = col, cex.labels = 1.5, lower.panel = NULL, pch=19, cex = 1)}
scatter <- "p"
library(pryr)
col <- c("blue", "red")
p%<p-% {pairs(train.data[numeric.col],col = col, cex.labels = 1.5, lower.panel = NULL, pch=19, cex = 1)}
scatter <- "p"
?pairs
# Data visualization function:
vis <- function(train.data, test.data, tar.loc.train, tar.loc.test)
{
# summarize dataset
sum.train <- summary(train.data)
sum.test  <- summary(test.data)
sum.data  <- list("summary.train.data"=sum.train, "summary.test.data"=sum.test)
# create ggplot_missing function to map missing values:
library(reshape2)
library(dplyr)
library(ggplot2)
ggplot_missing <- function(x){
x %>% is.na %>% melt %>% ggplot(data = ., aes(x = Var2, y = Var1)) +
geom_raster(aes(fill = value)) +
scale_fill_grey (name = '', labels = c('Present', 'Missing')) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 0.5)) +
labs(x = 'Variables on Dataset', y = 'Rows / Observations') }
# map missing values for train data:
vis.train <- ggplot_missing(train.data)
num.miss.train <- sapply(train.data,function(x) sum(is.na(x)))
# map missing values for test data:
vis.test <- ggplot_missing(test.data)
num.miss.test <- sapply(test.data,function(x) sum(is.na(x)))
miss.vis <- list("vis.train"=vis.train, "vis.test"=vis.test,
"num.train"=num.miss.train, "num.test"=num.miss.test)
# histogram of Target variable
if (is.numeric(train.data[tar.loc.train])) { histo <- hist(train.data[tar.loc.train]) }
else {histo = NULL}
# exploring relationships among features: correlation matrix
tar.name.train     <- names(train.data[tar.loc.train])
class.train        <- lapply(train.data[-tar.loc.train], class)
{
if (any(class.train=="factor")) {
char.name.train  <- names(which(class.train=="factor"))
char.loc.train   <- match(char.name.train, names(train.data))
numeric.col      <- names(train.data[-c(char.loc.train, tar.loc.train)]) }
else {
numeric.col      <- names(train.data[-tar.loc.train]) }
}
matrix.cor <- cor(train.data[numeric.col])
# visualing relationships among features: scatterplot matrix
col <- c("blue", "red")
pairs(train.data[numeric.col],col = col, cex.labels = 1.5, lower.panel = NULL, pch=19, cex = 1)
# more informative scatterplot matrix
library(psych)
pairs.panels(train.data[numeric.col])
return(list("summary"=sum.data, "missing.value"=miss.vis, "histogram"=histo, "matrix.correlation"=matrix.cor))
}
visualize.data <- vis(train.data, test.data, 17, 17)
visualize.data$missing.value$num.train
source('C:/Users/SEAN  PHAN/Desktop/Lazy Panda Project/Visualization.R')
col <- c("blue", "red")
pairs(train.data[numeric.col],col = col, cex.labels = 1.5, lower.panel = NULL, pch=19, cex = 1)
p1 <- recordPlot()
tar.name.train     <- names(train.data[tar.loc.train])
class.train        <- lapply(train.data[-tar.loc.train], class)
{
if (any(class.train=="factor")) {
char.name.train  <- names(which(class.train=="factor"))
char.loc.train   <- match(char.name.train, names(train.data))
numeric.col      <- names(train.data[-c(char.loc.train, tar.loc.train)]) }
else {
numeric.col      <- names(train.data[-tar.loc.train]) }
}
matrix.cor <- cor(train.data[numeric.col])
source('C:/Users/SEAN  PHAN/Desktop/Lazy Panda Project/Input.R')
tar.name.train     <- names(train.data[tar.loc.train])
class.train        <- lapply(train.data[-tar.loc.train], class)
{
if (any(class.train=="factor")) {
char.name.train  <- names(which(class.train=="factor"))
char.loc.train   <- match(char.name.train, names(train.data))
numeric.col      <- names(train.data[-c(char.loc.train, tar.loc.train)]) }
else {
numeric.col      <- names(train.data[-tar.loc.train]) }
}
matrix.cor <- cor(train.data[numeric.col])
col <- c("blue", "red")
pairs(train.data[numeric.col],col = col, cex.labels = 1.5, lower.panel = NULL, pch=19, cex = 1)
p1 <- recordPlot()
p1
source('C:/Users/SEAN  PHAN/Desktop/Lazy Panda Project/Input.R')
source('C:/Users/SEAN  PHAN/Desktop/Lazy Panda Project/CleanUp.R')
source('C:/Users/SEAN  PHAN/Desktop/Lazy Panda Project/FeaturesEncode.R')
source('C:/Users/SEAN  PHAN/Desktop/Lazy Panda Project/MissingValueImputation.R')
source('C:/Users/SEAN  PHAN/Desktop/Lazy Panda Project/Normalization.R')
source('C:/Users/SEAN  PHAN/Desktop/Lazy Panda Project/SupportVectorMachine.R')
clean.data <- cleanup(train.data, test.data, 17, 17)
source('C:/Users/SEAN  PHAN/Desktop/Lazy Panda Project/Rearrange.R')
clean.data <- cleanup(train.data, test.data, 17, 17)
source('C:/Users/SEAN  PHAN/Desktop/Lazy Panda Project/Visualization.R')
vis.data <- vis(train.data, test.data, tar.loc.train, tar.loc.test)
vis.data
library(dplyr)
source('C:/Users/SEAN  PHAN/Desktop/Lazy Panda Project/Visualization.R')
vis.data <- vis(train.data, test.data, tar.loc.train, tar.loc.test)
source('C:/Users/SEAN  PHAN/Desktop/Lazy Panda Project/Visualization.R')
vis.data <- vis(train.data, test.data, tar.loc.train, tar.loc.test)
vis.data$scatter.plot1
suvema(clean.data$`SVM.&.ANN`$train.data, clean.data$`SVM.&.ANN`$test.data)
clean.data$`SVM.&.ANN`$train.data
source('C:/Users/SEAN  PHAN/Desktop/Lazy Panda Project/Input.R')
source('C:/Users/SEAN  PHAN/Desktop/Lazy Panda Project/Input.R')
source('C:/Users/SEAN  PHAN/Desktop/Lazy Panda Project/Input.R')
clean.data <- cleanup(train.data, test.data, 17, 17)
source('C:/Users/SEAN  PHAN/Desktop/Lazy Panda Project/ArtificialNeuralNetwork.R')
ann(clean.data$`SVM.&.ANN`$train.data, clean.data$`SVM.&.ANN`$test.data)
# apply Neural Network
library(neuralnet)
?neuralnet
source('C:/Users/SEAN  PHAN/Desktop/Lazy Panda Project/ArtificialNeuralNetwork.R')
source('C:/Users/SEAN  PHAN/Desktop/Lazy Panda Project/Input.R')
source('C:/Users/SEAN  PHAN/Desktop/Lazy Panda Project/Input.R')
source('C:/Users/SEAN  PHAN/Desktop/Lazy Panda Project/MissingValueImputation.R')
source('C:/Users/SEAN  PHAN/Desktop/Lazy Panda Project/Rearrange.R')
source('C:/Users/SEAN  PHAN/Desktop/Lazy Panda Project/Normalization.R')
source('C:/Users/SEAN  PHAN/Desktop/Lazy Panda Project/FeaturesEncode.R')
source('C:/Users/SEAN  PHAN/Desktop/Lazy Panda Project/ArtificialNeuralNetwork.R')
source('C:/Users/SEAN  PHAN/Desktop/Lazy Panda Project/CleanUp.R')
dataset <- cleanup(train.data, test.data)
train.data[,tar.loc.train]
train.data$default
source('C:/Users/SEAN  PHAN/Desktop/Lazy Panda Project/CleanUp.R')
dataset <- cleanup(train.data, test.data)
# Input dataset and additional conditions:
tar.loc.train = 17 # the location of target variable column in train data
tar.loc.test = 17 # the location of target variable column in test data
# input dataset:
split.need=FALSE # TRUE if input data need to be splitted into train & test data
{
if (split.need) { # data need to be splitted
input.data <- read.csv("credit.csv", sep = ",", row.names = NULL)
indx <- sample(1:nrow(input.data), as.integer(0.9*nrow(input.data)))
train.data <- input.data[indx,]
test.data  <- input.data[-indx,]
}
else { # data doesn't need to be splitted
train.data <- read.csv("credit_train.csv",
sep = ",", row.names = NULL) # replace name as input data
test.data  <- read.csv("credit_test.csv",
sep = ",", row.names = NULL) # replace name as input data
}
}
# initial conditions:
# ordinal features:
ord.var = TRUE # TRUE if dataset contains ordinal column(s), otherwise FALSE
# the location of ordinal column(s)
ord.loc.train = c(1,3)
ord.loc.test  = c(1,3)
# the sorted ordinal variables in ascending order
vec1 = c("unknown", "< 0 DM", "1 - 200 DM", "> 200 DM")
vec2 = c("poor", "good", "very good", "critical", "perfect")
ord.vec <- list(vec1, vec2)
# Model training type define:
classify = TRUE # TRUE if target variable is suitable for classification otherwise FALSE
if (classify) {  # for classification:
train.data[tar.loc.train] <- lapply(train.data[tar.loc.train], as.factor)
test.data[tar.loc.test]   <- lapply(test.data[tar.loc.test], as.factor) }
else { # for numeric prediciton:
train.data[tar.loc.train] <- lapply(train.data[tar.loc.train], as.numeric)
test.data[tar.loc.test]   <- lapply(test.data[tar.loc.test], as.numeric) }
{
if (classify) {  # for classification:
train.data[tar.loc.train] <- lapply(train.data[tar.loc.train], as.factor)
test.data[tar.loc.test]   <- lapply(test.data[tar.loc.test], as.factor) }
else { # for numeric prediciton:
train.data[tar.loc.train] <- lapply(train.data[tar.loc.train], as.numeric)
test.data[tar.loc.test]   <- lapply(test.data[tar.loc.test], as.numeric) }
}
View(train.data)
# Imputate missing values:
imputated.data <- miss.imputate(train.data, test.data)
train.data     <- as.data.frame(imputated.data[1])
test.data      <- as.data.frame(imputated.data[2])
source('C:/Users/SEAN  PHAN/Desktop/Lazy Panda Project/MissingValueImputation.R')
# Imputate missing values:
imputated.data <- miss.imputate(train.data, test.data)
train.data     <- as.data.frame(imputated.data[1])
test.data      <- as.data.frame(imputated.data[2])
{ # start exclude ordinal variable column(s)
if (ord.var == TRUE) {
ord.col.train           <- data.frame(train.data[,ord.loc.train])
colnames(ord.col.train) <- names(train.data[ord.loc.train])
target.name.train       <- names(train.data[tar.loc.train])
train.data1             <- train.data[,-ord.loc.train]
tar.loc.train1          <- which(colnames(train.data1)==target.name.train)
ord.col.test            <- data.frame(test.data[,ord.loc.test])
colnames(ord.col.test)  <- names(test.data[ord.loc.test])
target.name.test        <- names(test.data[tar.loc.test])
test.data1              <- test.data[,-ord.loc.test]
tar.loc.test1           <- which(colnames(test.data1)==target.name.test) }
else {
train.data1    <- train.data
test.data1     <- test.data }
} # end exclude ordinal variable column(s)
# Rearrange dataset for Regression:
ordered.data.r  <- rearrange(train.data, test.data, tar.loc.train, tar.loc.test)
train.data.r   <- as.data.frame(ordered.data.r[1])
test.data.r    <- as.data.frame(ordered.data.r[2])
# train data
tar.name.train     <- names(train.data[tar.loc.train])
class.train        <- lapply(train.data[-tar.loc.train], class)
class.train
{ # start rearrange train data
if (any(class.train=="factor")) {
char.name.train  <- names(which(class.train=="factor"))
char.loc.train   <- match(char.name.train, names(train.data))
other.name.train <- names(train.data[-c(char.loc.train, tar.loc.train)])
col.order.train  <- c(tar.name.train, other.name.train, char.name.train)
train.data1      <- train.data[,col.order.train] }
else {
other.name.train <- names(train.data[-tar.loc.train])
col.order.train  <- c(tar.name.train, other.name.train)
train.data1      <- train.data[,col.order.train] }
} # end rearrange train data
names(train.data1)[1] <- paste("Target")
# test data
tar.name.test      <- names(test.data[tar.loc.test])
class.test         <- lapply(test.data[-tar.loc.test], class)
{ # start rearrange test data
if (any(class.test=="factor")) {
char.name.test   <- names(which(class.test=="factor"))
char.loc.test    <- match(char.name.test, names(test.data))
other.name.test  <- names(test.data[-c(char.loc.test, tar.loc.test)])
col.order.test   <- c(tar.name.test, other.name.test, char.name.test)
test.data1       <- test.data[,col.order.test] }
else {
other.name.test  <- names(test.data[-tar.loc.test])
col.order.test   <- c(tar.name.test, other.name.test)
test.data1       <- test.data[,col.order.test] }
} # end rearrange test data
names(test.data1)[1]  <- paste("Target")
return(list(train.data1, test.data1, other.name.train, other.name.test))
}
# test data
tar.name.test      <- names(test.data[tar.loc.test])
class.test         <- lapply(test.data[-tar.loc.test], class)
{ # start rearrange test data
if (any(class.test=="factor")) {
char.name.test   <- names(which(class.test=="factor"))
char.loc.test    <- match(char.name.test, names(test.data))
other.name.test  <- names(test.data[-c(char.loc.test, tar.loc.test)])
col.order.test   <- c(tar.name.test, other.name.test, char.name.test)
test.data1       <- test.data[,col.order.test] }
else {
other.name.test  <- names(test.data[-tar.loc.test])
col.order.test   <- c(tar.name.test, other.name.test)
test.data1       <- test.data[,col.order.test] }
} # end rearrange test data
names(test.data1)[1]  <- paste("Target")
return(list(train.data1, test.data1, other.name.train, other.name.test))
# test data
tar.name.test      <- names(test.data[tar.loc.test])
class.test         <- lapply(test.data[-tar.loc.test], class)
{ # start rearrange test data
if (any(class.test=="factor")) {
char.name.test   <- names(which(class.test=="factor"))
char.loc.test    <- match(char.name.test, names(test.data))
other.name.test  <- names(test.data[-c(char.loc.test, tar.loc.test)])
col.order.test   <- c(tar.name.test, other.name.test, char.name.test)
test.data1       <- test.data[,col.order.test] }
else {
other.name.test  <- names(test.data[-tar.loc.test])
col.order.test   <- c(tar.name.test, other.name.test)
test.data1       <- test.data[,col.order.test] }
} # end rearrange test data
names(test.data1)[1]  <- paste("Target")
source('C:/Users/SEAN  PHAN/Desktop/Lazy Panda Project/Rearrange.R')
ordered.data  <- rearrange(train.data1, test.data1, tar.loc.train1, tar.loc.test1)
train.data1   <- as.data.frame(ordered.data[1])
test.data1    <- as.data.frame(ordered.data[2])
other.name.train <- ordered.data[3][[1]]
other.name.test  <- ordered.data[4][[1]]
# Input dataset and additional conditions:
tar.loc.train = 17 # the location of target variable column in train data
tar.loc.test = 17 # the location of target variable column in test data
# input dataset:
split.need=FALSE # TRUE if input data need to be splitted into train & test data
{
if (split.need) { # data need to be splitted
input.data <- read.csv("credit.csv", sep = ",", row.names = NULL)
indx <- sample(1:nrow(input.data), as.integer(0.9*nrow(input.data)))
train.data <- input.data[indx,]
test.data  <- input.data[-indx,]
}
else { # data doesn't need to be splitted
train.data <- read.csv("credit_train.csv",
sep = ",", row.names = NULL) # replace name as input data
test.data  <- read.csv("credit_test.csv",
sep = ",", row.names = NULL) # replace name as input data
}
}
# initial conditions:
# ordinal features:
ord.var = TRUE # TRUE if dataset contains ordinal column(s), otherwise FALSE
# the location of ordinal column(s)
ord.loc.train = c(1,3)
ord.loc.test  = c(1,3)
# the sorted ordinal variables in ascending order
vec1 = c("unknown", "< 0 DM", "1 - 200 DM", "> 200 DM")
vec2 = c("poor", "good", "very good", "critical", "perfect")
ord.vec <- list(vec1, vec2)
# Model training type define:
classify = TRUE # TRUE if target variable is suitable for classification otherwise FALSE
source('C:/Users/SEAN  PHAN/Desktop/Lazy Panda Project/MissingValueImputation.R')
source('C:/Users/SEAN  PHAN/Desktop/Lazy Panda Project/Rearrange.R')
source('C:/Users/SEAN  PHAN/Desktop/Lazy Panda Project/CleanUp.R')
source('C:/Users/SEAN  PHAN/Desktop/Lazy Panda Project/Normalization.R')
source('C:/Users/SEAN  PHAN/Desktop/Lazy Panda Project/FeaturesEncode.R')
dataset <- cleanup(train.data, test.data)
dataset <- cleanup(train.data, test.data, tar.loc.train, tar.loc.test)
ann(dataset$`SVM.&.ANN`$train.data, dataset$`SVM.&.ANN`$test.data)
source('C:/Users/SEAN  PHAN/Desktop/Lazy Panda Project/ArtificialNeuralNetwork.R')
ann(dataset$`SVM.&.ANN`$train.data, dataset$`SVM.&.ANN`$test.data)
tar.loc.train = 7 # the location of target variable column in train data
tar.loc.test = 7 # the location of target variable column in test data
# input dataset:
split.need=FALSE # TRUE if input data need to be splitted into train & test data
{
if (split.need) { # data need to be splitted
input.data <- read.csv("credit.csv", sep = ",", row.names = NULL)
indx <- sample(1:nrow(input.data), as.integer(0.9*nrow(input.data)))
train.data <- input.data[indx,]
test.data  <- input.data[-indx,]
}
else { # data doesn't need to be splitted
train.data <- read.csv("sampletrain.csv",
sep = ",", row.names = NULL) # replace name as input data
test.data  <- read.csv("sampletest.csv",
sep = ",", row.names = NULL) # replace name as input data
}
}
# Model training type define:
classify = FALSE # TRUE if target variable is suitable for classification otherwise FALSE
dataset <- cleanup(train.data, test.data, tar.loc.train, tar.loc.test)
ann(dataset$`SVM.&.ANN`$train.data, dataset$`SVM.&.ANN`$test.data)
dataset$`SVM.&.ANN`$train.data
dataset$`SVM.&.ANN`$test.data
str(dataset$`SVM.&.ANN`$train.data)
train.data
str(train.data)
str(dataset$`SVM.&.ANN`$train.data)
tar.loc.train = 7 # the location of target variable column in train data
tar.loc.test = 7 # the location of target variable column in test data
train.data <- read.csv("sampletrain.csv",
sep = ",", row.names = NULL) # replace name as input data
test.data  <- read.csv("sampletest.csv",
sep = ",", row.names = NULL) # replace name as input data
}
train.data <- read.csv("sampletrain.csv",
sep = ",", row.names = NULL) # replace name as input data
test.data  <- read.csv("sampletest.csv",
sep = ",", row.names = NULL) # replace name as input data
classify = FALSE # TRUE if target variable is suitable for classification otherwise FALSE
train.data,
train.data
str(train.data)
source('C:/Users/SEAN  PHAN/Desktop/Lazy Panda Project/MissingValueImputation.R')
if (classify) {  # for classification:
train.data[tar.loc.train] <- lapply(train.data[tar.loc.train], as.factor)
test.data[tar.loc.test]   <- lapply(test.data[tar.loc.test], as.factor) }
else { # for numeric prediciton:
train.data[tar.loc.train] <- lapply(train.data[tar.loc.train], as.numeric)
test.data[tar.loc.test]   <- lapply(test.data[tar.loc.test], as.numeric) }
{
if (classify) {  # for classification:
train.data[tar.loc.train] <- lapply(train.data[tar.loc.train], as.factor)
test.data[tar.loc.test]   <- lapply(test.data[tar.loc.test], as.factor) }
else { # for numeric prediciton:
train.data[tar.loc.train] <- lapply(train.data[tar.loc.train], as.numeric)
test.data[tar.loc.test]   <- lapply(test.data[tar.loc.test], as.numeric) }
}
str(train.data)
# Imputate missing values:
imputated.data <- miss.imputate(train.data, test.data)
train.data     <- as.data.frame(imputated.data[1])
test.data      <- as.data.frame(imputated.data[2])
str(train.data)
# Exclude ordinal variable column(s):
{ # start exclude ordinal variable column(s)
if (ord.var == TRUE) {
ord.col.train           <- data.frame(train.data[,ord.loc.train])
colnames(ord.col.train) <- names(train.data[ord.loc.train])
target.name.train       <- names(train.data[tar.loc.train])
train.data1             <- train.data[,-ord.loc.train]
tar.loc.train1          <- which(colnames(train.data1)==target.name.train)
ord.col.test            <- data.frame(test.data[,ord.loc.test])
colnames(ord.col.test)  <- names(test.data[ord.loc.test])
target.name.test        <- names(test.data[tar.loc.test])
test.data1              <- test.data[,-ord.loc.test]
tar.loc.test1           <- which(colnames(test.data1)==target.name.test) }
else {
train.data1    <- train.data
test.data1     <- test.data }
} # end exclude ordinal variable column(s)
# Rearrange dataset for other methods:
ordered.data  <- rearrange(train.data1, test.data1, tar.loc.train1, tar.loc.test1)
train.data1   <- as.data.frame(ordered.data[1])
test.data1    <- as.data.frame(ordered.data[2])
other.name.train <- ordered.data[3][[1]]
other.name.test  <- ordered.data[4][[1]]
train.data1    <- train.data
test.data1     <- test.data
source('C:/Users/SEAN  PHAN/Desktop/Lazy Panda Project/CleanUp.R')
dataset <- cleanup(train.data, test.data, tar.loc.train, tar.loc.test)
# initial conditions:
# ordinal features:
ord.var = TRUE # TRUE if dataset contains ordinal column(s), otherwise FALSE
dataset <- cleanup(train.data, test.data, tar.loc.train, tar.loc.test)
# initial conditions:
# ordinal features:
ord.var = FALSE # TRUE if dataset contains ordinal column(s), otherwise FALSE
dataset <- cleanup(train.data, test.data, tar.loc.train, tar.loc.test)
source('C:/Users/SEAN  PHAN/Desktop/Lazy Panda Project/Rearrange.R')
dataset <- cleanup(train.data, test.data, tar.loc.train, tar.loc.test)
source('C:/Users/SEAN  PHAN/Desktop/Lazy Panda Project/Normalization.R')
source('C:/Users/SEAN  PHAN/Desktop/Lazy Panda Project/FeaturesEncode.R')
source('C:/Users/SEAN  PHAN/Desktop/Lazy Panda Project/Visualization.R')
dataset <- cleanup(train.data, test.data, tar.loc.train, tar.loc.test)
ann(dataset$`SVM.&.ANN`$train.data, dataset$`SVM.&.ANN`$test.data)
source('C:/Users/SEAN  PHAN/Desktop/Lazy Panda Project/ArtificialNeuralNetwork.R')
str(train.data)
str(dataset$`SVM.&.ANN`$train.data)
ann(dataset$`SVM.&.ANN`$train.data, dataset$`SVM.&.ANN`$test.data)
source('C:/Users/SEAN  PHAN/Desktop/Lazy Panda Project/ArtificialNeuralNetwork.R')
ann(dataset$`SVM.&.ANN`$train.data, dataset$`SVM.&.ANN`$test.data)
source('C:/Users/SEAN  PHAN/Desktop/Lazy Panda Project/ArtificialNeuralNetwork.R')
ann(dataset$`SVM.&.ANN`$train.data, dataset$`SVM.&.ANN`$test.data)
source('C:/Users/SEAN  PHAN/Desktop/Lazy Panda Project/SupportVectorMachine.R')
suvema(dataset$`SVM.&.ANN`$train.data, dataset$`SVM.&.ANN`$test.data)
